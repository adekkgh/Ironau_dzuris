@model UserViewModel

@{
    Layout = null;
}
@await Html.PartialAsync("_ProfileStyles")



<div class="change-password-container">
    <h3 class="change-password__title">Смена пароля</h3>
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="error-container">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(value => value.Errors))
            {
                <p>@error.ErrorMessage</p>
            }
        </div>
    }
    <form action="/Profile/ChangePassword" method="post" class="change-password">
        <div asp-validation-summary="None"></div>
        <div class="change-password__input-container">
            <input asp-for="OldPassword" type="password" id="oldPasswordInput" class="change-password__password-old" placeholder="Прежний пароль" />
            <button type="button" class="password-toggle-btn" onclick="toggleOldPasswordVisibility()">
                <i id="eyeIcon-1" class="fa fa-eye"></i>
            </button>
            <span asp-validation-for="OldPassword" class="change-password__input-warning"></span>
        </div>
        <div class="change-password__input-container">
            <input asp-for="NewPassword" type="password" id="newPasswordInput" class="change-password__password" placeholder="Новый пароль" />
            <button type="button" class="password-toggle-btn" onclick="toggleNewPasswordVisibility()">
                <i id="eyeIcon-2" class="fa fa-eye"></i>
            </button>
            <span asp-validation-for="NewPassword" class="change-password__input-warning"></span>
        </div>
        <div class="change-password__input-container">
            <input asp-for="NewPasswordConfirmation" type="password" id="repeatPasswordInput" class="change-password__password-repeat" placeholder="Повторите новый пароль" />
            <span asp-validation-for="NewPasswordConfirmation" class="change-password__input-warning"></span>
        </div>
        <button type="submit" class="change-password__button">Подтвердить</button>
    </form>
</div>



<script>
    function toggleOldPasswordVisibility() {
        var oldPasswordInput = document.getElementById("oldPasswordInput");
        var eyeIcon = document.getElementById("eyeIcon-1");

        if (oldPasswordInput.type === "password") {
            oldPasswordInput.type = "text";
            eyeIcon.classList.remove("fa-eye");
            eyeIcon.classList.add("fa-eye-slash");
        }
        else {
            oldPasswordInput.type = "password";
            eyeIcon.classList.remove("fa-eye-slash");
            eyeIcon.classList.add("fa-eye");
        }
    }

    function toggleNewPasswordVisibility() {
        var newPasswordInput = document.getElementById("newPasswordInput");
        var eyeIcon = document.getElementById("eyeIcon-2");

        if (newPasswordInput.type === "password") {
            newPasswordInput.type = "text";
            eyeIcon.classList.remove("fa-eye");
            eyeIcon.classList.add("fa-eye-slash");
        }
        else {
            newPasswordInput.type = "password";
            eyeIcon.classList.remove("fa-eye-slash");
            eyeIcon.classList.add("fa-eye");
        }
    }
</script>